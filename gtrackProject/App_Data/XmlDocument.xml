<?xml version="1.0"?>
<doc>
    <assembly>
        <name>gtrackProject</name>
    </assembly>
    <members>
        <member name="M:gtrackProject.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,gtrackProject.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,gtrackProject.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,gtrackProject.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create one using <see cref="T:gtrackProject.Areas.HelpPage.ObjectGenerator"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},gtrackProject.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:gtrackProject.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleKey.#ctor(gtrackProject.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:gtrackProject.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,gtrackProject.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:gtrackProject.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:gtrackProject.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:gtrackProject.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:gtrackProject.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:gtrackProject.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:gtrackProject.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:gtrackProject.Controllers.account.AccountController">
            <summary>
            Default AccountController to manage all account with OWIN Security and OAuth
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:gtrackProject.Controllers.account.AccountController.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:gtrackProject.Controllers.account.AccountController.#ctor(Microsoft.AspNet.Identity.UserManager{Microsoft.AspNet.Identity.EntityFramework.IdentityUser},Microsoft.Owin.Security.ISecureDataFormat{Microsoft.Owin.Security.AuthenticationTicket})" -->
        <member name="M:gtrackProject.Controllers.account.AccountController.GetUserInfo">
            <summary>
            Get UserInfo.
            </summary>
            <returns>UserInfoViewModel.</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.Logout">
            <summary>
            Logout!!!
            </summary>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.GetManageInfo(System.String,System.Boolean)">
            <summary>
            Get ManageInfo.
            </summary>
            <param name="returnUrl">return Url.</param>
            <param name="generateState">generateState (true,false)</param>
            <returns>ManageInfoViewModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.ChangePassword(gtrackProject.Models.account.ChangePasswordBindingModel)">
            <summary>
            ChangePassword!!!
            </summary>
            <param name="model">The <see cref="T:gtrackProject.Models.account.ChangePasswordBindingModel"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.SetPassword(gtrackProject.Models.account.SetPasswordBindingModel)">
            <summary>
            SetPassword!!!
            </summary>
            <param name="model">The <see cref="T:gtrackProject.Models.account.SetPasswordBindingModel"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.AddExternalLogin(gtrackProject.Models.account.AddExternalLoginBindingModel)">
            <summary>
            Add ExternalLogin
            </summary>
            <param name="model">The <see cref="T:gtrackProject.Models.account.AddExternalLoginBindingModel"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.RemoveLogin(gtrackProject.Models.account.RemoveLoginBindingModel)">
            <summary>
            RemoveLogin!!!
            </summary>
            <param name="model">The <see cref="T:gtrackProject.Models.account.RemoveLoginBindingModel"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.GetExternalLogin(System.String,System.String)">
            <summary>
            Get ExternalLogin
            </summary>
            <param name="provider">provider</param>
            <param name="error">error msg</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.GetExternalLogins(System.String,System.Boolean)">
            <summary>
            Get ExternalLogins
            </summary>
            <param name="returnUrl">return Url</param>
            <param name="generateState">generateState (true,false)</param>
            <returns>List ExternalLoginViewModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.Register(gtrackProject.Models.account.RegisterBindingModel)">
            <summary>
            Register User *by "customer service","admin"* Not AllowAnonymous
            </summary>
            <param name="model">The <see cref="T:gtrackProject.Models.account.RegisterBindingModel"/>.</param>
            <returns>IdentityUser</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.AccountController.RegisterExternal(gtrackProject.Models.account.RegisterExternalBindingModel)">
            <summary>
            RegisterExternal
            </summary>
            <param name="model">The <see cref="T:gtrackProject.Models.account.RegisterExternalBindingModel"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.account.CustomerController">
            <summary>
            CustomerController - CRUD Customer User By cs,admin.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.account.CustomerController.#ctor(gtrackProject.Repositories.account.IRepos.ICustomerRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"><see cref="T:gtrackProject.Repositories.account.IRepos.ICustomerRepository"/></param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.account.CustomerController.GetByHd(System.Int32)">
            <summary>
            Gets All Customer by header
            </summary>
            <param name="hdId">header id *int*</param>
            <returns>CustomerModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.CustomerController.GetUser(System.Int32)">
            <summary>
            Get Customer *for all user*
            </summary>
            <param name="id">id *int*</param>
            <returns>CustomerModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.CustomerController.PostUser(gtrackProject.Models.account.CustomerModel)">
            <summary>
            Post Customer
            </summary>
            <param name="postCust">The <see cref="T:gtrackProject.Models.account.CustomerModel"/>.</param>
            <returns>CustomerModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.CustomerController.PutUser(System.Int32,gtrackProject.Models.account.CustomerModel)">
            <summary>
            Put Customer
            </summary>
            <param name="id">id *int*</param>
            <param name="putCust">The <see cref="T:gtrackProject.Models.account.CustomerModel"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.CustomerController.DeleteRole(System.Int32)">
            <summary>
            Delete Customer
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.account.RoleAdminController">
            <summary>
            RoleAdminController - CRUD User's role By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.account.RoleAdminController.#ctor(gtrackProject.Repositories.account.IRepos.IRoleAdminRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.account.IRepos.IRoleAdminRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.account.RoleAdminController.GetRoles">
            <summary>
            Gets All roles. *Queryable*
            </summary>
            <returns>IdentityRole</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.RoleAdminController.GetRole(System.String)">
            <summary>
            Gets a role.
            </summary>
            <param name="id">id by AspIdentity *nvarchar 128*</param>
            <returns>IdentityRole</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.RoleAdminController.PostRole(Microsoft.AspNet.Identity.EntityFramework.IdentityRole)">
            <summary>
            Post a role.
            </summary>
            <param name="rolePost">The <see cref="T:Microsoft.AspNet.Identity.EntityFramework.IdentityRole"/>.</param>
            <returns>IdentityRole</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.RoleAdminController.PutRole(System.String,Microsoft.AspNet.Identity.EntityFramework.IdentityRole)">
            <summary>
            Put a role.
            </summary>
            <param name="id">id by AspIdentity. *nvarchar 128*</param>
            <param name="rolePut">The <see cref="T:Microsoft.AspNet.Identity.EntityFramework.IdentityRole"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.RoleAdminController.DeleteRole(System.String)">
            <summary>
            DELETE a role.
            </summary>
            <param name="id">id by AspIdentity. *nvarchar 128*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.account.HdController">
            <summary>
            HdController - CRUD Header By cs,admin.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.account.HdController.#ctor(gtrackProject.Repositories.account.IRepos.IHdRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.account.IRepos.IHdRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.account.HdController.Gethds">
            <summary>
            Gets All headers. *Queryable*
            </summary>
            <returns>Hd</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.HdController.Gethd(System.Int16)">
            <summary>
            Gets a header.
            </summary>
            <param name="id">id *short*</param>
            <returns>Hd</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.HdController.Puthd(System.Int16,gtrackProject.Models.account.Hd)">
            <summary>
            Put a header
            </summary>
            <param name="id">id *short*</param>
            <param name="hd">The <see cref="T:gtrackProject.Models.account.Hd"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.HdController.Posthd(gtrackProject.Models.account.Hd)">
            <summary>
            Post a header
            </summary>
            <param name="hd">The <see cref="T:gtrackProject.Models.account.Hd"/>.</param>
            <returns>Hd</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.HdController.Deletehd(System.Int16)">
            <summary>
            Delete a header
            </summary>
            <param name="id">id *short*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.driver.DriverCateController">
            <summary>
            DriverCateController - CRUD Driver's category By Admin Only.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverCateController.#ctor(gtrackProject.Repositories.driver.IRepos.IDriverCateRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.driver.IRepos.IDriverCateRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverCateController.Get">
            <summary>
            Gets All categories. *Queryable*
            </summary>
            <returns>DriverCategory</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverCateController.Get(System.Byte)">
            <summary>
            Get a category.
            </summary>
            <param name="id">id *byte*</param>
            <returns>DriverCategory</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverCateController.Post(gtrackProject.Models.driver.DriverCategory)">
            <summary>
            Post a category.
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.driver.DriverCategory"/>.</param>
            <returns>DriverCategory</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverCateController.Put(System.Byte,gtrackProject.Models.driver.DriverCategory)">
            <summary>
            Put a category.
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.driver.DriverCategory"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverCateController.Delete(System.Byte)">
            <summary>
            Delete a category.
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.driver.DriverController">
            <summary>
            RoleAdminController - CRUD Driver User.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverController.#ctor(gtrackProject.Repositories.driver.IRepos.IDriverRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.driver.IRepos.IDriverRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverController.Get">
            <summary>
            Gets All Drivers. *Queryable*
            </summary>
            <returns>Driver</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverController.Get(System.Int32)">
            <summary>
            Gets a Driver.
            </summary>
            <param name="id">id *int*</param>
            <returns>Driver</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverController.Post(gtrackProject.Models.driver.Driver)">
            <summary>
            Post a Driver
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.driver.Driver"/>.</param>
            <returns>Driver</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverController.Put(System.Int32,gtrackProject.Models.driver.Driver)">
            <summary>
            Put a Driver
            </summary>
            <param name="id">id *int*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.driver.Driver"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.driver.DriverController.Delete(System.Int32)">
            <summary>
            Delete a Driver *by cs,admin and customer*
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.account.EmployeeAdminController">
            <summary>
            RoleAdminController - CRUD Employee User By Admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.account.EmployeeAdminController.#ctor(gtrackProject.Repositories.account.IRepos.IEmployeeAdminRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.account.IRepos.IEmployeeAdminRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.account.EmployeeAdminController.GetUsers">
            <summary>
            Gets Employee
            </summary>
            <returns>EmployeeAdminModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.EmployeeAdminController.GetUser(System.Int32)">
            <summary>
            Get Employee
            </summary>
            <param name="id">id *int*</param>
            <returns>EmployeeAdminModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.EmployeeAdminController.PostUser(gtrackProject.Models.account.EmployeeAdminModel)">
            <summary>
            Post Employee
            </summary>
            <param name="postEmp">The <see cref="T:gtrackProject.Models.account.EmployeeAdminModel"/>.</param>
            <returns>EmployeeAdminModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.EmployeeAdminController.PutUser(System.Int32,gtrackProject.Models.account.EmployeeAdminModel)">
            <summary>
            Put Employee
            </summary>
            <param name="id">id *int*</param>
            <param name="putEmp">The <see cref="T:gtrackProject.Models.account.EmployeeAdminModel"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.account.EmployeeAdminController.DeleteRole(System.Int32)">
            <summary>
            Delete Employee
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.order.ExtendTypeController">
            <summary>
            ExtendTypeController - CRUD Order Extend Type By cs,admin.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.order.ExtendTypeController.#ctor(gtrackProject.Repositories.order.IRepos.IOdExtendTypeRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.order.IRepos.IOdExtendTypeRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.order.ExtendTypeController.Get">
            <summary>
            Gets All extendTypes. *Queryable*
            </summary>
            <returns>OrderExtendType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.ExtendTypeController.Get(System.Byte)">
            <summary>
            Get a extendType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>OrderExtendType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.ExtendTypeController.Post(gtrackProject.Models.order.OrderExtendType)">
            <summary>
            Post a extendType.
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.order.OrderExtendType"/>.</param>
            <returns>OrderExtendType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.ExtendTypeController.Put(System.Byte,gtrackProject.Models.order.OrderExtendType)">
            <summary>
            Put a extendType.
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.order.OrderExtendType"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.ExtendTypeController.Delete(System.Byte)">
            <summary>
            Delete a extendType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.order.FixOrderController">
            <summary>
            FixOrderController - CRUD Fix Order By admin, cs, install and qc.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.order.FixOrderController.#ctor(gtrackProject.Repositories.order.IRepos.IFixOrderRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.order.IRepos.IFixOrderRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.order.FixOrderController.Get">
            <summary>
            Gets All FixOrders. *Queryable*
            </summary>
            <returns>FixOrders</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.FixOrderController.Get(System.Int32)">
            <summary>
            Get a FixOrder
            </summary>
            <param name="id">id int**</param>
            <returns>FixOrder</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.FixOrderController.Post(gtrackProject.Models.order.FixOrders)">
            <summary>
            Post a FixOrder
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.order.FixOrders"/>.</param>
            <returns>FixOrder</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.FixOrderController.Put(System.Int32,gtrackProject.Models.order.FixOrders)">
            <summary>
            Put a FixOrder
            </summary>
            <param name="id">id *int*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.order.FixOrders"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.FixOrderController.Delete(System.Int32)">
            <summary>
            Delete a FixOrder
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.order.OrderController">
            <summary>
            OrderController - CRUD Order By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderController.#ctor(gtrackProject.Repositories.order.IRepos.IOrderRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.order.IRepos.IOrderRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderController.Get">
            <summary>
            Gets All Orders.
            </summary>
            <returns>Orders</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderController.Get(System.Int32)">
            <summary>
            Get a Order.
            </summary>
            <param name="id">id *int*</param>
            <returns>Order</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderController.Post(gtrackProject.Models.order.Order)">
            <summary>
            Post a Order
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.order.Order"/>.</param>
            <returns>Order</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderController.Put(System.Int32,gtrackProject.Models.order.Order)">
            <summary>
            Put a Order
            </summary>
            <param name="id">id *int*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.order.Order"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderController.Delete(System.Int32)">
            <summary>
            Delete a Order
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.order.OrderStateController">
            <summary>
            OrderStateController - CRUD Order's State By admin Only.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderStateController.#ctor(gtrackProject.Repositories.order.IRepos.IOdStateRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.order.IRepos.IOdStateRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderStateController.Get">
            <summary>
            Gets All OrderState
            </summary>
            <returns>OrderState</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderStateController.Get(System.Byte)">
            <summary>
            Get a OrderState
            </summary>
            <param name="id">id *byte*</param>
            <returns>OrderState</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderStateController.Post(gtrackProject.Models.order.OrderProcessState)">
            <summary>
            Post a OrderState
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.order.OrderProcessState"/>.</param>
            <returns>OrderState</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderStateController.Put(System.Byte,gtrackProject.Models.order.OrderProcessState)">
            <summary>
            Put a OrderState.
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.order.OrderProcessState"/>.</param>
            <returns>HTTP State</returns>
        </member>
        <member name="M:gtrackProject.Controllers.order.OrderStateController.Delete(System.Byte)">
            <summary>
            Delete a OrderState
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP State</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.CameraController">
            <summary>
            RoleAdminController - CRUD Product GPS By admin, manu, cs, qc.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraController.#ctor(gtrackProject.Repositories.product.IRepos.ICameraRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.ICameraRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraController.Get">
            <summary>
            Gets All Cameras
            </summary>
            <returns>ProductCamera</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraController.Get(System.Int32)">
            <summary>
            Get a Camera
            </summary>
            <param name="id">id *int*</param>
            <returns>ProductCamera</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraController.Post(gtrackProject.Models.product.ProductCamera)">
            <summary>
            Post a Camera
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductCamera"/>.</param>
            <returns>ProductCamera</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraController.Put(System.Int32,gtrackProject.Models.product.ProductCamera)">
            <summary>
            Put a Camera
            </summary>
            <param name="id">id *int*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductCamera"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraController.Delete(System.Byte)">
            <summary>
            Delete a Camera
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.CameraStatusController">
            <summary>
            CameraStatusController - CRUD Camera StatusType By admin Only.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraStatusController.#ctor(gtrackProject.Repositories.product.IRepos.ICameraStatusRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.ICameraStatusRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraStatusController.Get">
            <summary>
            Gets All StatusTypes
            </summary>
            <returns>ProductCameraStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraStatusController.Get(System.Byte)">
            <summary>
            Get a StatusType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>ProductCameraStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraStatusController.Post(gtrackProject.Models.product.ProductCameraStatus)">
            <summary>
            Post a StatusType.
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductCameraStatus"/>.</param>
            <returns>ProductCameraStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraStatusController.Put(System.Byte,gtrackProject.Models.product.ProductCameraStatus)">
            <summary>
            Put a StatusType
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductCameraStatus"/>.</param>
            <returns>ProductCameraStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.CameraStatusController.Delete(System.Byte)">
            <summary>
            Delete a StatusType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>ProductCameraStatus</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.GpsMemoryController">
            <summary>
            GpsMemoryController - CRUD GPS Memory store By admin Only.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsMemoryController.#ctor(gtrackProject.Repositories.product.IRepos.IGpsMemoryRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.IGpsMemoryRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsMemoryController.Get">
            <summary>
            Gets All StatusTypes
            </summary>
            <returns>ProductGpsMemoryStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsMemoryController.Get(System.Byte)">
            <summary>
            Get a StatusType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>ProductGpsMemoryStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsMemoryController.Post(gtrackProject.Models.product.ProductGpsMemoryStatus)">
            <summary>
            Post a StatusType.
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductGpsMemoryStatus"/>.</param>
            <returns>ProductGpsMemoryStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsMemoryController.Put(System.Byte,gtrackProject.Models.product.ProductGpsMemoryStatus)">
            <summary>
            Put a StatusType
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductGpsMemoryStatus"/>.</param>
            <returns>ProductGpsMemoryStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsMemoryController.Delete(System.Byte)">
            <summary>
            Delete a StatusType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>ProductGpsMemoryStatus</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.ProductStateController">
            <summary>
            ProductStateController - CRUD GPS's StatusType By admin Only.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductStateController.#ctor(gtrackProject.Repositories.product.IRepos.IProductStateRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.IProductStateRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductStateController.Get">
            <summary>
            Gets All StatusTypes
            </summary>
            <returns>ProductProductState</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductStateController.Get(System.Byte)">
            <summary>
            Get a StatusType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>ProductProductState</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductStateController.Post(gtrackProject.Models.product.ProductProcessState)">
            <summary>
            Post a StatusType.
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductProcessState"/>.</param>
            <returns>ProductProductState</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductStateController.Put(System.Byte,gtrackProject.Models.product.ProductProcessState)">
            <summary>
            Put a StatusType.
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductProcessState"/>.</param>
            <returns>ProductProductState</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductStateController.Delete(System.Byte)">
            <summary>
            Delete a StatusType.
            </summary>
            <param name="id">id *byte*</param>
            <returns>ProductProductState</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.GpsVersionController">
            <summary>
            GpsVersionController - CRUD GPS's Version By admin, manu, cs, qc.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsVersionController.#ctor(gtrackProject.Repositories.product.IRepos.IGpsVersionRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.IGpsVersionRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsVersionController.Get">
            <summary>
            Gets All Versions
            </summary>
            <returns>ProductGpsVersion</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsVersionController.Get(System.Byte)">
            <summary>
            Get a Version
            </summary>
            <param name="id">id *byte*</param>
            <returns>ProductGpsVersion</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsVersionController.Post(gtrackProject.Models.product.ProductGpsVersion)">
            <summary>
            Post a Version
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductGpsVersion"/>.</param>
            <returns>ProductGpsVersion</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsVersionController.Put(System.Byte,gtrackProject.Models.product.ProductGpsVersion)">
            <summary>
            Put a Version
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductGpsVersion"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.GpsVersionController.Delete(System.Byte)">
            <summary>
            Delete a Version
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.ProductGpsController">
            <summary>
            RoleAdminController - CRUD Product GPS By admin, manu, cs, install, qc.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductGpsController.#ctor(gtrackProject.Repositories.product.IRepos.IProductGpsRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.IProductGpsRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductGpsController.Get">
            <summary>
            Gets All ProductGps
            </summary>
            <returns>ProductGps</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductGpsController.Get(System.Int32)">
            <summary>
            Get a ProductGps
            </summary>
            <param name="id">id *int*</param>
            <returns>ProductGps</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductGpsController.Post(gtrackProject.Models.product.ProductGps)">
            <summary>
            Post a ProductGps
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductGps"/>.</param>
            <returns>ProductGps</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductGpsController.Put(System.Int32,gtrackProject.Models.product.ProductGps)">
            <summary>
            Put a ProductGps
            </summary>
            <param name="id">id *int*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.ProductGps"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.ProductGpsController.Delete(System.Int32)">
            <summary>
            Delete a ProductGps
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.SimBrandController">
            <summary>
            SimBrandController - CRUD Sim's Brand By admin, cs.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimBrandController.#ctor(gtrackProject.Repositories.product.IRepos.ISimBrandRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.ISimBrandRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimBrandController.Get">
            <summary>
            Gets All SimBrands
            </summary>
            <returns>SimBrands</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimBrandController.Get(System.Byte)">
            <summary>
            Get a SimBrand
            </summary>
            <param name="id">id *byte*</param>
            <returns>SimBrand</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimBrandController.Post(gtrackProject.Models.product.SimBrand)">
            <summary>
            Post a SimBrand
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.SimBrand"/>.</param>
            <returns>SimBrand</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimBrandController.Put(System.Byte,gtrackProject.Models.product.SimBrand)">
            <summary>
            Put a SimBrand
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.SimBrand"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimBrandController.Delete(System.Byte)">
            <summary>
            Delete a SimBrand
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.product.SimPaymentController">
            <summary>
            SimPaymentController - CRUD Sim's Payment By admin, cs.
            ** test complete **
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimPaymentController.#ctor(gtrackProject.Repositories.product.IRepos.ISimPaymentRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.product.IRepos.ISimPaymentRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimPaymentController.Get">
            <summary>
            Gets All PaymentTypes
            </summary>
            <returns>SimPaymentType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimPaymentController.Get(System.Byte)">
            <summary>
            Get a PaymentType
            </summary>
            <param name="id">id *byte*</param>
            <returns>SimPaymentType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimPaymentController.Post(gtrackProject.Models.product.SimPaymentType)">
            <summary>
            Post a PaymentType
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.product.SimPaymentType"/>.</param>
            <returns>SimPaymentType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimPaymentController.Put(System.Byte,gtrackProject.Models.product.SimPaymentType)">
            <summary>
            Put a PaymentType
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.product.SimPaymentType"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.product.SimPaymentController.Delete(System.Byte)">
            <summary>
            Delete a PaymentType
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnCmBattController">
            <summary>
            UnCmBattController - CRUD CmBatt's Status By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmBattController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnCmBattRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnCmBattRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmBattController.Get">
            <summary>
            Gets All UnCmBatts
            </summary>
            <returns>UnCmBatts</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmBattController.Get(System.String)">
            <summary>
            Get a UnCmBatt
            </summary>
            <param name="id">id *char*</param>
            <returns>UnCmBatt</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmBattController.Post(gtrackProject.Models.universe.UnCmBatt)">
            <summary>
            Post a UnCmBatt
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmBatt"/>.</param>
            <returns>UnCmBatt</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmBattController.Put(System.String,gtrackProject.Models.universe.UnCmBatt)">
            <summary>
            Put a UnCmBatt
            </summary>
            <param name="id">id *char*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmBatt"/>.</param>
            <returns>UnCmBatt</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmBattController.Delete(System.String)">
            <summary>
            Delete a UnCmBatt
            </summary>
            <param name="id">id *char*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnCmCommController">
            <summary>
            UnCmCommController - CRUD CmComm's Status By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmCommController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnCmCommRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnCmCommRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmCommController.Get">
            <summary>
            Gets All UnCmComms
            </summary>
            <returns>UnCmComms</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmCommController.Get(System.String)">
            <summary>
            Get a UnCmComm
            </summary>
            <param name="id">id *char*</param>
            <returns>UnCmComm</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmCommController.Post(gtrackProject.Models.universe.UnCmComm)">
            <summary>
            Post a UnCmComm
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmComm"/>.</param>
            <returns>UnCmComm</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmCommController.Put(System.String,gtrackProject.Models.universe.UnCmComm)">
            <summary>
            Put a UnCmComm
            </summary>
            <param name="id">id *char*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmComm"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmCommController.Delete(System.String)">
            <summary>
            Delete a UnCmComm
            </summary>
            <param name="id">id *char*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnCmEngineController">
            <summary>
            UnCmEngineController - CRUD CmEngine's Status By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmEngineController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnCmEngineRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnCmEngineRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmEngineController.Get">
            <summary>
            Gets All UnCmEngine
            </summary>
            <returns>UnCmEngine</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmEngineController.Get(System.String)">
            <summary>
            Get a UnCmEngine
            </summary>
            <param name="id">id *char*</param>
            <returns>UnCmEngine</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmEngineController.Post(gtrackProject.Models.universe.UnCmEngine)">
            <summary>
            Post a UnCmEngine
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmEngine"/>.</param>
            <returns>UnCmEngine</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmEngineController.Put(System.String,gtrackProject.Models.universe.UnCmEngine)">
            <summary>
            Put a UnCmEngine
            </summary>
            <param name="id">id *char*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmEngine"/>.</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmEngineController.Delete(System.String)">
            <summary>
            Delete a UnCmEngine
            </summary>
            <param name="id">id *char*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnCmGpsController">
            <summary>
            UnCmGpsController - CRUD CmGps's Status By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmGpsController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnCmGpsRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnCmGpsRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmGpsController.Get">
            <summary>
            Gets All UnCmGps
            </summary>
            <returns>UnCmGps</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmGpsController.Get(System.String)">
            <summary>
            Get a UnCmGps
            </summary>
            <param name="id">id *char*</param>
            <returns>UnCmGps</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmGpsController.Post(gtrackProject.Models.universe.UnCmGps)">
            <summary>
            Post a UnCmGps
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmGps"/>.</param>
            <returns>UnCmGps</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmGpsController.Put(System.String,gtrackProject.Models.universe.UnCmGps)">
            <summary>
            Put a UnCmGps
            </summary>
            <param name="id">id *char*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmGps"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmGpsController.Delete(System.String)">
            <summary>
            Delete a UnCmGps
            </summary>
            <param name="id">id *char*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnCmMeterController">
            <summary>
            UnCmMeterController - CRUD CmMeter's Status By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmMeterController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnCmMeterRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnCmMeterRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmMeterController.Get">
            <summary>
            Gets All UnCmMeter
            </summary>
            <returns>UnCmMeter</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmMeterController.Get(System.String)">
            <summary>
            Get a UnCmMeter
            </summary>
            <param name="id">id *char*</param>
            <returns>UnCmMeter</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmMeterController.Post(gtrackProject.Models.universe.UnCmMeter)">
            <summary>
            Post a UnCmMeter
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmMeter"/>.</param>
            <returns>UnCmMeter</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmMeterController.Put(System.String,gtrackProject.Models.universe.UnCmMeter)">
            <summary>
            Put a UnCmMeter
            </summary>
            <param name="id">id *char*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmMeter"/>.</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmMeterController.Delete(System.String)">
            <summary>
            Delete a UnCmMeter
            </summary>
            <param name="id">id *char*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnCmSignalController">
            <summary>
            UnCmSignalController - CRUD CmSignal's Status By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmSignalController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnCmSignalRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnCmSignalRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmSignalController.Get">
            <summary>
            Gets All UnCmSignal
            </summary>
            <returns>UnCmSignal</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmSignalController.Get(System.String)">
            <summary>
            Get a UnCmSignal
            </summary>
            <param name="id">id *char*</param>
            <returns>UnCmSignal</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmSignalController.Post(gtrackProject.Models.universe.UnCmSignal)">
            <summary>
            Post a UnCmSignal
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmSignal"/>.</param>
            <returns>UnCmSignal</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmSignalController.Put(System.String,gtrackProject.Models.universe.UnCmSignal)">
            <summary>
            Put a UnCmSignal
            </summary>
            <param name="id">id *char*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmSignal"/>.</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmSignalController.Delete(System.String)">
            <summary>
            Delete a UnCmSignal
            </summary>
            <param name="id">id *char*</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnCmTempController">
            <summary>
            UnCmTempController - CRUD CmTemp's Status By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmTempController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnCmTempRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnCmTempRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmTempController.Get">
            <summary>
            Gets All UnCmTemps
            </summary>
            <returns>UnCmTemps</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmTempController.Get(System.String)">
            <summary>
            Get a UnCmTemp
            </summary>
            <param name="id">id *char*</param>
            <returns>UnCmTemp</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmTempController.Post(gtrackProject.Models.universe.UnCmTemp)">
            <summary>
            Post a UnCmTemp
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmTemp"/>.</param>
            <returns>UnCmTemp</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmTempController.Put(System.String,gtrackProject.Models.universe.UnCmTemp)">
            <summary>
            Put a UnCmTemp
            </summary>
            <param name="id">id *char*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnCmTemp"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnCmTempController.Delete(System.String)">
            <summary>
            Delete a UnCmTemp
            </summary>
            <param name="id">id *char*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UnDisplayController">
            <summary>
            UnDisplayController - CRUD Universe's DisplayStatus By admin Only.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnDisplayController.#ctor(gtrackProject.Repositories.universe.IRepos.IUnDisplayRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUnDisplayRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnDisplayController.Get">
            <summary>
            Gets All UnDisplayStatus
            </summary>
            <returns>UnDisplayStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnDisplayController.Get(System.Byte)">
            <summary>
            Get a UnDisplayStatus
            </summary>
            <param name="id">id *byte*</param>
            <returns>UnDisplayStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnDisplayController.Post(gtrackProject.Models.universe.UnDisplayStatus)">
            <summary>
            Post a UnDisplayStatus
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnDisplayStatus"/>.</param>
            <returns>UnDisplayStatus</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnDisplayController.Put(System.Byte,gtrackProject.Models.universe.UnDisplayStatus)">
            <summary>
            Put a UnDisplayStatus
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.UnDisplayStatus"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UnDisplayController.Delete(System.Byte)">
            <summary>
            Delete a UnDisplayStatus
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.universe.UniverseController">
            <summary>
            UniverseController - RU Universe.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UniverseController.#ctor(gtrackProject.Repositories.universe.IRepos.IUniverseRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.universe.IRepos.IUniverseRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UniverseController.Get">
            <summary>
            Gets All Universes
            </summary>
            <returns>Universes</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UniverseController.Get(System.Int32)">
            <summary>
            Get a Universe
            </summary>
            <param name="id">id *int*</param>
            <returns>Universe</returns>
        </member>
        <member name="M:gtrackProject.Controllers.universe.UniverseController.Put(System.Int32,gtrackProject.Models.universe.Universe)">
            <summary>
            Put a Universe
            </summary>
            <param name="id">id *int*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.universe.Universe"/>.</param>
            <returns></returns>
            todo put universe fromurl - possible???
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.LpTypeController">
            <summary>
            LpTypeController - CRUD Vehicle's LicensePlate By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.LpTypeController.#ctor(gtrackProject.Repositories.vehicle.IRepos.ILpTypeRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.ILpTypeRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.LpTypeController.Get">
            <summary>
            Gets All LpTypes
            </summary>
            <returns>LpTypes</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.LpTypeController.Get(System.Byte)">
            <summary>
            Get a LpType
            </summary>
            <param name="id">id *byte*</param>
            <returns>LpType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.LpTypeController.Post(gtrackProject.Models.vehicle.LpType)">
            <summary>
            Post a LpType
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.LpType"/>.</param>
            <returns>LpType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.LpTypeController.Put(System.Byte,gtrackProject.Models.vehicle.LpType)">
            <summary>
            Put a LpType
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.LpType"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.LpTypeController.Delete(System.Byte)">
            <summary>
            Delete a LpType
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.ProvinceController">
            <summary>
            ProvinceController - Read only Provinces.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.ProvinceController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IProvinceRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IProvinceRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.ProvinceController.Get">
            <summary>
            Gets All Provinces
            </summary>
            <returns>Provinces</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.ProvinceController.Get(System.Byte)">
            <summary>
            Get a Province
            </summary>
            <param name="id">id *byte*</param>
            <returns>Province</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.VehicleBrandController">
            <summary>
            VehicleBrandController - CRUD Vehicle's Brand By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleBrandController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IVehicleBrandRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IVehicleBrandRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleBrandController.Get">
            <summary>
            Gets All VehicleBrands
            </summary>
            <returns>VehicleBrands</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleBrandController.Get(System.Byte)">
            <summary>
            Get a VehicleBrand
            </summary>
            <param name="id">id *byte*</param>
            <returns>VehicleBrand</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleBrandController.Post(gtrackProject.Models.vehicle.VehicleBrand)">
            <summary>
            Post a VehicleBrand
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleBrand"/>.</param>
            <returns>VehicleBrand</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleBrandController.Put(System.Byte,gtrackProject.Models.vehicle.VehicleBrand)">
            <summary>
            Put a VehicleBrand
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleBrand"/>.</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleBrandController.Delete(System.Byte)">
            <summary>
            Delete a VehicleBrand
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.VehicleColorController">
            <summary>
            VehicleColorController - CRU Vehicle's Color By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleColorController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IVehicleColorRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IVehicleColorRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleColorController.Get">
            <summary>
            Gets All VehicleColors
            </summary>
            <returns>VehicleColors</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleColorController.Get(System.Byte)">
            <summary>
            Get a VehicleColor
            </summary>
            <param name="id">id *byte*</param>
            <returns>VehicleColor</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleColorController.Post(gtrackProject.Models.vehicle.VehicleColor)">
            <summary>
            Post a VehicleColor
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleColor"/>.</param>
            <returns>VehicleColor</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleColorController.Put(System.Byte,gtrackProject.Models.vehicle.VehicleColor)">
            <summary>
            Put a VehicleColor
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleColor"/>.</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.VehicleController">
            <summary>
            VehicleController - CRUD Vehicle By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IVehicleRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IVehicleRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleController.Get">
            <summary>
            Gets All Vehicles *for all user
            </summary>
            <returns>Vehicles</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleController.Get(System.Int32)">
            <summary>
            Get a Vehicle *for all user
            </summary>
            <param name="id">Vehicle</param>
            <returns>Vehicle</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleController.Post(gtrackProject.Models.vehicle.Vehicle)">
            <summary>
            Post a Vehicle
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.Vehicle"/>.</param>
            <returns>Vehicle</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleController.Post(System.Int16,System.Int32)">
            <summary>
            Post a Vehicle *FromUrl*
            </summary>
            <param name="hdId">id *short*</param>
            <param name="q">quantity *int*</param>
            <returns>HTTP Status</returns>
            <exception cref="T:System.ArgumentNullException">maxIdCar isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleController.Put(System.Int32,gtrackProject.Models.vehicle.Vehicle)">
            <summary>
            Put a Vehicle
            </summary>
            <param name="id">id *int*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.Vehicle"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleController.Delete(System.Int32)">
            <summary>
            Delete a Vehicle
            </summary>
            <param name="id">id *int*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.VehicleHTypeController">
            <summary>
            VehicleHTypeController - CRU Vehicle's HeadType By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleHTypeController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IVehicleHeadTypeRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IVehicleHeadTypeRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleHTypeController.Get">
            <summary>
            Gets All VehicleHeadTypes
            </summary>
            <returns>VehicleHeadTypes</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleHTypeController.Get(System.Byte)">
            <summary>
            Get a VehicleHeadType
            </summary>
            <param name="id">id *byte*</param>
            <returns>VehicleHeadType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleHTypeController.Post(gtrackProject.Models.vehicle.VehicleHeadType)">
            <summary>
            Post a VehicleHeadType
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleHeadType"/>.</param>
            <returns>VehicleHeadType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleHTypeController.Put(System.Byte,gtrackProject.Models.vehicle.VehicleHeadType)">
            <summary>
            Put a VehicleHeadType
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleHeadType"/>.</param>
            <returns>HTTP Stauts</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.VehicleModelController">
            <summary>
            VehicleModelController - CRUD Vehicle's Model By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleModelController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IVehicleModelRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IVehicleModelRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleModelController.Get">
            <summary>
            Gets All VehicleModels
            </summary>
            <returns>VehicleModels</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleModelController.Get(System.Int16)">
            <summary>
            Get a VehicleModel
            </summary>
            <param name="id">id *short*</param>
            <returns>VehicleModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleModelController.Post(gtrackProject.Models.vehicle.VehicleModel)">
            <summary>
            Post a VehicleModel
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleModel"/>.</param>
            <returns>VehicleModel</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleModelController.Put(System.Int16,gtrackProject.Models.vehicle.VehicleModel)">
            <summary>
            Put a VehicleModel
            </summary>
            <param name="id">id *short*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleModel"/>.</param>
            <returns>TTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleModelController.Delete(System.Int16)">
            <summary>
            Delete a VehicleModel
            </summary>
            <param name="id">id *short*</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.VehicleOgnController">
            <summary>
            VehicleOgnController - CRUD Vehicle's Oganize By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleOgnController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IVehicleOganizeRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IVehicleOganizeRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleOgnController.Get">
            <summary>
            Gets All VehicleOganizes
            </summary>
            <returns>VehicleOganize</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleOgnController.Get(System.Byte)">
            <summary>
            Get a VehicleOganize
            </summary>
            <param name="id">id *byte*</param>
            <returns>VehicleOganize</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleOgnController.Post(gtrackProject.Models.vehicle.VehicleOganize)">
            <summary>
            Post a VehicleOganize
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleOganize"/>.</param>
            <returns>VehicleOganize</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleOgnController.Put(System.Byte,gtrackProject.Models.vehicle.VehicleOganize)">
            <summary>
            Put a VehicleOganize
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleOganize"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleOgnController.Delete(System.Byte)">
            <summary>
            Delete a VehicleOganize
            </summary>
            <param name="id">id *byte*</param>
            <returns>HTTP STatus</returns>
        </member>
        <member name="T:gtrackProject.Controllers.vehicle.VehicleTypeController">
            <summary>
            VehicleTypeController - CRU Vehicle's Type By admin, cs.
            </summary>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleTypeController.#ctor(gtrackProject.Repositories.vehicle.IRepos.IVehicleTypeRepository)">
            <summary>
            Call repository
            </summary>
            <param name="repository"> The <see cref="T:gtrackProject.Repositories.vehicle.IRepos.IVehicleTypeRepository"/>.</param>
            <exception cref="T:System.ArgumentNullException">repository isNull</exception>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleTypeController.Get">
            <summary>
            Gets All VehicleTypes
            </summary>
            <returns>VehicleTypes</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleTypeController.Get(System.Byte)">
            <summary>
            Get a VehicleType
            </summary>
            <param name="id">id *byte*</param>
            <returns>VehicleType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleTypeController.Post(gtrackProject.Models.vehicle.VehicleType)">
            <summary>
            Post a VehicleType
            </summary>
            <param name="value">The <see cref="T:gtrackProject.Models.vehicle.VehicleType"/>.</param>
            <returns>VehicleType</returns>
        </member>
        <member name="M:gtrackProject.Controllers.vehicle.VehicleTypeController.Put(System.Byte,gtrackProject.Models.vehicle.VehicleType)">
            <summary>
            Put a VehicleType
            </summary>
            <param name="id">id *byte*</param>
            <param name="value">the <see cref="T:gtrackProject.Models.vehicle.VehicleType"/>.</param>
            <returns>HTTP Status</returns>
        </member>
        <member name="T:gtrackProject.Models.Mapping.product.ProductCameraStatusMap">
            <summary>
            
            </summary>
        </member>
        <member name="T:gtrackProject.Models.Mapping.product.ProductGpsMemoryStatusMap">
            <summary>
            
            </summary>
        </member>
        <member name="T:gtrackProject.Models.product.ProductCameraStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:gtrackProject.Models.product.ProductGpsMemoryStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:gtrackProject.Models.Mapping.order.OrderProcessStateMap">
            <summary>
            
            </summary>
        </member>
        <member name="T:gtrackProject.Models.order.OrderProcessState">
            <summary>
            
            </summary>
        </member>
        <member name="T:gtrackProject.Models.universe.Universe">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
